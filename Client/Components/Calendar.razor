<div class="calendar">
    <div class="row">
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="SelectYear">
                @for (int year = 2010; year < 2022; year++)
                {
                    <option>@year</option>
                }
            </select>
        </div>
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="SelectMonth">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="11">December</option>
            </select>
        </div>
    </div>
    <table class="calendar-table">
        <thead>
            <tr>
                <td>Sun</td>
                <td>Mon</td>
                <td>Tue</td>
                <td>Wed</td>
                <td>Thu</td>
                <td>Fri</td>
                <td>Sat</td>
            </tr>
        </thead>
        <tbody>
            @for (int row = 0; row < _rows; row++)
            {
                <tr>
                    @foreach (var day in _days.Skip(row * 7).Take(7))
                    {
                        <td>
                            @DayTemplate(day)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private int _year = 2020;
    private int _month = 5;
    private int _rows = 0;
    private List<CalendarDay> _days = new List<CalendarDay>();

    [Parameter]
    public RenderFragment<CalendarDay> DayTemplate { get; set; }

    void SelectYear(ChangeEventArgs e)
    {
        _year = Convert.ToInt32(e.Value.ToString());
        UpdateCalendar();
    }

    void SelectMonth(ChangeEventArgs e)
    {
        _month = Convert.ToInt32(e.Value.ToString());
        UpdateCalendar();
    }

    void UpdateCalendar()
    {
        _days = new List<CalendarDay>();

        var numberOfEmptyDays = 0;
        var daysInMonth = DateTime.DaysInMonth(_year, _month);
        var firstDay = new DateTime(_year, _month, 1);

        if (firstDay.DayOfWeek != DayOfWeek.Sunday)
        {
            numberOfEmptyDays = (int)firstDay.DayOfWeek;
        }

        for (int day = 0; day < numberOfEmptyDays; ++day)
        {
            _days.Add(new CalendarDay
            {
                Number = 0,
                IsEmpty = true,
            });
        }

        for (int day = 0; day < daysInMonth; ++day)
        {
            _days.Add(new CalendarDay
            {
                Number = day + 1,
                IsEmpty = false,
                Date = new DateTime(_year, _month, day + 1),
            });
        }

        var remainingDays = _days.Count % 7;
        if (remainingDays == 0)
        {
            _rows = _days.Count / 7;
        }
        else
        {
            _rows = Convert.ToInt32(_days.Count / 7) + 1;
        }
    }
}
